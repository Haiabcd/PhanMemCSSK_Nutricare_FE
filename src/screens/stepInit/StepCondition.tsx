import React, { useMemo, useState } from 'react';
import {
  TextInput,
  Pressable,
  ScrollView,
  Keyboard,
  LayoutChangeEvent,
  NativeSyntheticEvent,
  NativeScrollEvent,
  Platform,
  View,
} from 'react-native';
import WizardFrame from '../../components/WizardFrame';
import { useWizard } from '../../context/WizardContext';
import { colors as C } from '../../constants/colors';
import TextComponent from '../../components/TextComponent';
import ViewComponent from '../../components/ViewComponent';
import GreenScrollbar from '../../components/Step/GreenScrollbar';

/* ====== G·ª£i √Ω m·∫∑c ƒë·ªãnh ====== */
const SUGGESTED_CONDITIONS = [
  'TƒÉng huy·∫øt √°p',
  'ƒê√°i th√°o ƒë∆∞·ªùng',
  'Tim m·∫°ch',
  'Hen suy·ªÖn',
  'R·ªëi lo·∫°n m·ª° m√°u',
  'Suy gi√°p',
  'C∆∞·ªùng gi√°p',
  'Lo√©t d·∫° d√†y',
  'Vi√™m ƒë·∫°i tr√†ng',
  'Gout',
  'Vi√™m gan',
  'Suy th·∫≠n',
  'Vi√™m kh·ªõp',
  'Tr·∫ßm c·∫£m',
  'Lo √¢u',
  'B·ªánh t·ª± mi·ªÖn',
  'B·ªánh ph·ªïi t·∫Øc ngh·∫Ωn m·∫°n t√≠nh',
  'B·ªánh th·∫≠n m·∫°n t√≠nh',
  'B·ªánh gan m·∫°n t√≠nh',
  'B·ªánh tuy·∫øn gi√°p',
  'B·ªánh v·ªÅ m·∫Øt',
  'B·ªánh v·ªÅ da',
  'B·ªánh v·ªÅ th·∫ßn kinh',
  'B·ªánh v·ªÅ ti√™u ho√°',
];

const StepConditionScreen = () => {
  const { form, addAllergy, removeAllergy, clearAllergies } = useWizard();

  const [text, setText] = useState('');

  const normalized = text.trim().toLowerCase();
  const suggestions = useMemo(() => {
    if (!normalized) return SUGGESTED_CONDITIONS;
    return SUGGESTED_CONDITIONS.filter(s => s.toLowerCase().includes(normalized));
  }, [normalized]);

  // so s√°nh kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng & d·∫•u
  const existsInsensitive = (v: string) =>
    form.allergies.some(a => a.localeCompare(v, undefined, { sensitivity: 'accent' }) === 0);

  const handleAdd = (val?: string) => {
    const v = (val ?? text).trim();
    if (!v) return;
    if (existsInsensitive(v)) {
      setText('');
      Keyboard.dismiss();
      return;
    }
    addAllergy(v);
    setText('');
    Keyboard.dismiss();
  };

  /* ==== Scroll metrics cho 2 v√πng ==== */
  const SUG_MAX = 170;

  const [sugVisibleH, setSugVisibleH] = useState(SUG_MAX);
  const [sugContentH, setSugContentH] = useState(0);
  const [sugScrollY, setSugScrollY] = useState(0);

  const [selVisibleH, setSelVisibleH] = useState(0);
  const [selContentH, setSelContentH] = useState(0);
  const [selScrollY, setSelScrollY] = useState(0);

  const onSugLayout = (e: LayoutChangeEvent) =>
    setSugVisibleH(Math.min(SUG_MAX, Math.round(e.nativeEvent.layout.height)));
  const onSelLayout = (e: LayoutChangeEvent) =>
    setSelVisibleH(Math.round(e.nativeEvent.layout.height));

  const onSugContentSizeChange = (_w: number, h: number) => setSugContentH(h);
  const onSelContentSizeChange = (_w: number, h: number) => setSelContentH(h);

  const onSugScroll = (e: NativeSyntheticEvent<NativeScrollEvent>) =>
    setSugScrollY(e.nativeEvent.contentOffset.y);
  const onSelScroll = (e: NativeSyntheticEvent<NativeScrollEvent>) =>
    setSelScrollY(e.nativeEvent.contentOffset.y);

  return (
    <WizardFrame
      title="B·ªánh n·ªÅn c·ªßa b·∫°n"
      subtitle="H√£y cho ch√∫ng t√¥i bi·∫øt n·∫øu b·∫°n c√≥ b·ªánh n·ªÅn ƒë·ªÉ g·ª£i √Ω ch·∫ø ƒë·ªô ph√π h·ª£p. C√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c√≥."
    >
      {/* √î nh·∫≠p + N√∫t th√™m */}
      <ViewComponent
        row
        center
        gap={8}
        px={12}
        py={Platform.OS === 'ios' ? 10 : 6}
        radius={12}
        border
        borderColor={C.border}
        backgroundColor={C.inputBg}
        style={Platform.select({
          ios: {
            shadowColor: '#000',
            shadowOpacity: 0.05,
            shadowRadius: 4,
            shadowOffset: { width: 0, height: 2 },
          },
          android: { elevation: 1 },
        })}
        mb={12}
      >
        <TextInput
          value={text}
          onChangeText={setText}
          placeholder="Nh·∫≠p t√™n b·ªánh n·ªÅn (v√≠ d·ª•: TƒÉng huy·∫øt √°p)‚Ä¶"
          placeholderTextColor={C.sub}
          onSubmitEditing={() => handleAdd()}
          returnKeyType="done"
          style={{ flex: 1, fontSize: 15, color: C.text, paddingVertical: 6, paddingHorizontal: 4 }}
        />
      </ViewComponent>

      {/* G·ª¢I √ù PH·ªî BI·∫æN */}
      <ViewComponent variant="card" p={10} mb={10} radius={12} border>
        <ViewComponent row between alignItems="center" mb={6}>
          <TextComponent
            text={`G·ª£i √Ω ph·ªï bi·∫øn (${suggestions.length})`}
            variant="caption"
            weight="bold"
            tone="muted"
          />
        </ViewComponent>

        {suggestions.length === 0 ? (
          <ViewComponent
            center
            p={20}
            radius={12}
            border
            style={{ borderStyle: 'dashed' }}
            backgroundColor={C.bg}
            borderColor={C.border}
          >
            <TextComponent text="Kh√¥ng t√¨m th·∫•y g·ª£i √Ω." weight="semibold" tone="muted" />
            <TextComponent text="Th·ª≠ t·ª´ kho√° kh√°c nh√©." variant="caption" tone="muted" />
          </ViewComponent>
        ) : (
          <View style={{ position: 'relative' }}>
            <ScrollView
              style={{ maxHeight: SUG_MAX }}
              contentContainerStyle={chipWrap}
              onContentSizeChange={onSugContentSizeChange}
              onLayout={onSugLayout}
              onScroll={onSugScroll}
              scrollEventThrottle={16}
              showsVerticalScrollIndicator={false}
              persistentScrollbar={false}
              nestedScrollEnabled
            >
              {suggestions.map(s => {
                const selected = existsInsensitive(s);
                return (
                  <Pressable
                    key={s}
                    onPress={() => handleAdd(s)}
                    disabled={selected}
                    style={({ pressed }) => [
                      chipBase,
                      {
                        borderColor: selected ? C.primaryBorder : C.border,
                        backgroundColor: selected ? C.primarySurface : C.slate50,
                        opacity: pressed ? 0.9 : 1,
                      },
                    ]}
                  >
                    <TextComponent
                      text={s}
                      variant="caption"
                      weight="semibold"
                      color={selected ? C.primaryDark : C.slate700}
                    />
                  </Pressable>
                );
              })}
            </ScrollView>

            <GreenScrollbar visibleH={sugVisibleH} contentH={sugContentH} scrollY={sugScrollY} />
          </View>
        )}
      </ViewComponent>

      {/* ƒê√É CH·ªåN */}
      <ViewComponent variant="card" p={10} mb={10} radius={12} border style={{ flex: 1 }}>
        <ViewComponent row between alignItems="center" mb={6}>
          <TextComponent
            text={`B·ªánh n·ªÅn ƒë√£ ch·ªçn (${form.allergies.length})`}
            variant="caption"
            weight="bold"
            tone="muted"
          />
          {!!form.allergies.length && (
            <Pressable
              onPress={clearAllergies}
              hitSlop={12}
              accessibilityRole="button"
              accessibilityLabel="Xo√° t·∫•t c·∫£ b·ªánh n·ªÅn ƒë√£ ch·ªçn"
              android_ripple={{ color: 'rgba(239,68,68,0.15)', radius: 200 }}
              style={({ pressed }) => [
                {
                  flexDirection: 'row',
                  alignItems: 'center',
                  gap: 8,
                  paddingHorizontal: 14,
                  paddingVertical: 10,
                  minHeight: 44,
                  borderRadius: 999,
                  borderWidth: 1,
                  borderColor: C.red,
                  backgroundColor: pressed ? 'rgba(239,68,68,0.12)' : 'rgba(239,68,68,0.08)',
                  opacity: pressed ? 0.98 : 1,
                  transform: [{ scale: pressed ? 0.99 : 1 }],
                },
              ]}
            >
              <TextComponent text="üóë" variant="body" />
              <TextComponent text="Xo√° t·∫•t c·∫£" variant="body" weight="semibold" tone="danger" />
            </Pressable>
          )}
        </ViewComponent>

        {form.allergies.length === 0 ? (
          <ViewComponent
            center
            p={20}
            radius={12}
            border
            style={{ borderStyle: 'dashed' }}
            backgroundColor={C.bg}
            borderColor={C.border}
          >
            <TextComponent text="Ch∆∞a c√≥ b·ªánh n·ªÅn n√†o ƒë∆∞·ª£c th√™m." weight="semibold" tone="muted" />
            <TextComponent
              text="Nh·∫≠p b·ªánh n·ªÅn ho·∫∑c ch·ªçn t·ª´ g·ª£i √Ω b√™n tr√™n."
              variant="caption"
              tone="muted"
              align="center"
            />
          </ViewComponent>
        ) : (
          <View style={{ position: 'relative', flex: 1, minHeight: 0 }}>
            <ScrollView
              style={{ flex: 1 }}
              contentContainerStyle={chipWrap}
              onContentSizeChange={onSelContentSizeChange}
              onLayout={onSelLayout}
              onScroll={onSelScroll}
              scrollEventThrottle={16}
              showsVerticalScrollIndicator={false}
              persistentScrollbar={false}
              nestedScrollEnabled
            >
              {form.allergies.map(a => (
                <ViewComponent
                  key={a}
                  row
                  center
                  gap={8}
                  px={12}
                  py={8}
                  radius={999}
                  border
                  borderColor={C.primaryBorder}
                  backgroundColor={C.primarySurface}
                >
                  <TextComponent text={`üíä ${a}`} weight="bold" />
                  <Pressable onPress={() => removeAllergy(a)} hitSlop={8}>
                    <TextComponent text="‚úï" color={C.red} weight="bold" />
                  </Pressable>
                </ViewComponent>
              ))}
            </ScrollView>

            <GreenScrollbar visibleH={selVisibleH} contentH={selContentH} scrollY={selScrollY} />
          </View>
        )}
      </ViewComponent>
    </WizardFrame>
  );
};


const chipWrap = {
  flexDirection: 'row' as const,
  flexWrap: 'wrap' as const,
  gap: 8,
  paddingVertical: 4,
  paddingRight: 8,
};

const chipBase = {
  borderWidth: 1,
  paddingHorizontal: 10,
  paddingVertical: 8,
  borderRadius: 999,
};

export default StepConditionScreen;
