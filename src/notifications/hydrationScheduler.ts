// src/notifications/hydrationScheduler.ts
import notifee, {
    AndroidImportance,
    TimestampTrigger,
    TriggerType,
    EventType,
    AndroidAction,
    AuthorizationStatus,
    Event,
} from '@notifee/react-native';
import { Alert, Linking, Platform } from 'react-native';

export type GoalKey = 'LOSE' | 'GAIN' | 'MAINTAIN';

type HydrationSlot = { time: string; title: string; ml: number; note?: string };
type Plan = { principle: string; totalHint: string; slots: HydrationSlot[] };

const CHANNEL_ID = 'hydration';
const ACTION_MARK_DRUNK = 'mark-drunk';
const actions: AndroidAction[] = [
    { title: '‚úÖ ƒê√£ u·ªëng', pressAction: { id: ACTION_MARK_DRUNK } },
];

/** ====== K·∫ø ho·∫°ch u·ªëng n∆∞·ªõc theo m·ª•c ti√™u ====== */
export const HYDRATION_PLANS: Record<GoalKey, Plan> = {
    LOSE: {
        principle: 'U·ªëng tr∆∞·ªõc b·ªØa 15‚Äì30‚Äô ƒë·ªÉ t·∫°o no nh·∫π, gi·∫£m l∆∞·ª£ng ƒÉn.',
        totalHint: '‚âà 2.2 ‚Äì 2.5 l/ng√†y',
        slots: [
            { time: '06:30', title: 'Sau khi th·ª©c d·∫≠y', ml: 300, note: 'K√≠ch ho·∫°t ti√™u ho√°' },
            { time: '07:30', title: 'Tr∆∞·ªõc ƒÉn s√°ng 30‚Äô', ml: 250, note: 'T·∫°o c·∫£m gi√°c no' },
            { time: '10:30', title: 'Gi·ªØa bu·ªïi s√°ng', ml: 200, note: 'Gi·ªØ nƒÉng l∆∞·ª£ng' },
            { time: '12:15', title: 'Tr∆∞·ªõc ƒÉn tr∆∞a 15‚Äô', ml: 250, note: 'Gi·∫£m kh·∫©u ph·∫ßn' },
            { time: '13:45', title: 'Gi·ªØa bu·ªïi chi·ªÅu', ml: 250, note: 'Gi·∫£m th√®m ƒÉn' },
            { time: '18:15', title: 'Tr∆∞·ªõc ƒÉn t·ªëi 15‚Äô', ml: 200, note: 'No nh·∫π' },
            { time: '20:30', title: 'Sau ƒÉn t·ªëi 1h', ml: 150, note: 'Thanh l·ªçc nh·∫π' },
            { time: '21:45', title: 'Tr∆∞·ªõc ng·ªß 30‚Äô', ml: 100, note: 'Tr√°nh kh√¥ mi·ªáng' },
        ],
    },
    GAIN: {
        principle: 'Kh√¥ng u·ªëng ngay tr∆∞·ªõc b·ªØa; ∆∞u ti√™n sau b·ªØa ƒë·ªÉ h·∫•p thu dinh d∆∞·ª°ng.',
        totalHint: '‚âà 2.5 ‚Äì 3.0 l/ng√†y',
        slots: [
            { time: '06:45', title: 'Sau khi th·ª©c d·∫≠y', ml: 250, note: 'Kh·ªüi ƒë·ªông chuy·ªÉn ho√°' },
            { time: '07:45', title: 'Sau ƒÉn s√°ng 15‚Äô', ml: 300, note: 'H·ªó tr·ª£ ti√™u ho√°' },
            { time: '10:30', title: 'Gi·ªØa bu·ªïi s√°ng', ml: 250, note: 'T·ªânh t√°o' },
            { time: '12:45', title: 'Sau ƒÉn tr∆∞a 15‚Äô', ml: 300, note: 'H·∫•p thu t·ªët' },
            { time: '13:25', title: 'Gi·ªØa bu·ªïi chi·ªÅu', ml: 300, note: 'B√π n∆∞·ªõc' },
            { time: '18:45', title: 'Sau ƒÉn t·ªëi 15‚Äô', ml: 250, note: 'Th·∫£i ƒë·ªôc nh·∫π' },
            { time: '21:15', title: 'Tr∆∞·ªõc ng·ªß 45‚Äô', ml: 150, note: 'Gi·ªØ ·∫©m, ng·ªß ngon' },
        ],
    },
    MAINTAIN: {
        principle: 'Gi·ªØ th√≥i quen ·ªïn ƒë·ªãnh, chia ƒë·ªÅu l∆∞·ª£ng n∆∞·ªõc.',
        totalHint: '‚âà 2.3 ‚Äì 2.7 l/ng√†y',
        slots: [
            { time: '06:30', title: 'Sau khi th·ª©c d·∫≠y', ml: 300, note: 'Kh·ªüi ƒë·ªông ng√†y m·ªõi' },
            { time: '08:00', title: 'Sau ƒÉn s√°ng 30‚Äô', ml: 200, note: 'C√¢n b·∫±ng d·ªãch th·ªÉ' },
            { time: '10:30', title: 'Gi·ªØa bu·ªïi s√°ng', ml: 200, note: 'Duy tr√¨ nƒÉng l∆∞·ª£ng' },
            { time: '12:45', title: 'Sau ƒÉn tr∆∞a 15‚Äô', ml: 250, note: 'H·ªó tr·ª£ ti√™u ho√°' },
            { time: '13:25', title: 'Gi·ªØa bu·ªïi chi·ªÅu', ml: 250, note: 'Gi·ªØ t·ªânh t√°o' },
            { time: '18:30', title: 'Sau ƒÉn t·ªëi 30‚Äô', ml: 200, note: 'Thanh l·ªçc nh·∫π' },
            { time: '21:15', title: 'Tr∆∞·ªõc ng·ªß 30‚Äô', ml: 150, note: 'Ng·ªß ngon' },
        ],
    },
};

/** ====== Chu·∫©n b·ªã quy·ªÅn th√¥ng b√°o ====== */
export async function ensureHydrationReady() {
    await notifee.createChannel({ id: CHANNEL_ID, name: 'Hydration Reminders', importance: AndroidImportance.HIGH });

    const settings = await notifee.getNotificationSettings();
    if (settings.authorizationStatus === AuthorizationStatus.AUTHORIZED) return;

    const perm = await notifee.requestPermission();
    if (perm.authorizationStatus === AuthorizationStatus.AUTHORIZED) return;

    if (Platform.OS === 'android') {
        Alert.alert(
            'B·∫≠t th√¥ng b√°o & quy·ªÅn n·ªÅn',
            'NutriCare c·∫ßn quy·ªÅn th√¥ng b√°o/b√°o th·ª©c ƒë·ªÉ nh·∫Øc u·ªëng n∆∞·ªõc ƒë√∫ng gi·ªù.',
            [
                { text: 'Hu·ª∑', style: 'cancel' },
                {
                    text: 'M·ªü C√†i ƒë·∫∑t',
                    onPress: async () => {
                        try { await notifee.openNotificationSettings(); } catch { await Linking.openSettings().catch(() => { }); }
                        Alert.alert(
                            '‚öôÔ∏è G·ª£i √Ω',
                            '1) ·ª®ng d·ª•ng > NutriCare > B√°o th·ª©c & nh·∫Øc nh·ªü ‚Üí B·∫¨T\n2) Pin > Kh√¥ng t·ªëi ∆∞u ho√° cho NutriCare',
                        );
                    },
                },
            ],
        );
    }
}

/** ====== Helpers ====== */
const pad2 = (n: number) => (n < 10 ? `0${n}` : `${n}`);
const ymd = (d: Date) => `${d.getFullYear()}${pad2(d.getMonth() + 1)}${pad2(d.getDate())}`;
const dateAtTime = (base: Date, hhmm: string) => {
    const [hh, mm] = hhmm.split(':').map((x) => parseInt(x, 10));
    return new Date(base.getFullYear(), base.getMonth(), base.getDate(), hh, mm, 0, 0);
};
const fiveMinsBefore = (d: Date) => new Date(d.getTime() - 5 * 60 * 1000);
const makeId = (date: Date, idx: number) => `hydration-${ymd(date)}-${idx}`;

/** ====== L√™n l·ªãch theo ng√†y ====== */
export async function scheduleHydrationForDate(goal: GoalKey, forDate: Date) {
    await ensureHydrationReady();
    const plan = HYDRATION_PLANS[goal];

    for (let i = 0; i < plan.slots.length; i++) {
        const s = plan.slots[i];
        const drinkAt = dateAtTime(forDate, s.time);
        let fireAt = fiveMinsBefore(drinkAt);

        // N·∫øu gi·ªù nh·∫Øc ƒë√£ tr√¥i qua ‚Üí chuy·ªÉn sang ng√†y mai
        if (fireAt.getTime() <= Date.now()) {
            const tmr = new Date(forDate);
            tmr.setDate(tmr.getDate() + 1);
            fireAt = fiveMinsBefore(dateAtTime(tmr, s.time));
        }

        const id = makeId(fireAt, i);
        await notifee.cancelNotification(id);

        const trigger: TimestampTrigger = {
            type: TriggerType.TIMESTAMP,
            timestamp: fireAt.getTime(),
            alarmManager: { allowWhileIdle: true },
        };

        // üö´ KH√îNG hi·ªÉn th·ªã s·ªë ml
        await notifee.createTriggerNotification(
            {
                id,
                android: { channelId: CHANNEL_ID, pressAction: { id: 'default' }, actions },
                title: `üíß ${s.title} (c√≤n ~ 5 ph√∫t‚Äô)`,
                body: s.note ? `${s.note} ‚Ä¢ Nh·∫Øc u·ªëng n∆∞·ªõc` : 'Nh·ªõ u·ªëng n∆∞·ªõc',
                data: { kind: 'hydration', time: s.time, date: ymd(forDate), idx: String(i) },
            },
            trigger,
        );
    }
}

/** ====== L√™n l·ªãch nhi·ªÅu ng√†y ====== */
export async function scheduleHydrationRange(goal: GoalKey, daysAhead = 7) {
    await ensureHydrationReady();
    const base = new Date();
    for (let i = 0; i <= daysAhead; i++) {
        const d = new Date(base.getFullYear(), base.getMonth(), base.getDate() + i);
        await scheduleHydrationForDate(goal, d);
    }
}

/** ====== Foreground handler ====== */
export function subscribeHydrationForeground() {
    return notifee.onForegroundEvent(async ({ type, detail }) => {
        if (type === EventType.ACTION_PRESS && detail.pressAction?.id === ACTION_MARK_DRUNK) {
            // TODO: ghi l·ªãch s·ª≠ u·ªëng n∆∞·ªõc n·∫øu c·∫ßn
        }
    });
}

/** ====== Background handler ====== */
export async function hydrationBackgroundHandler({ type, detail }: Event) {
    try {
        if (type === EventType.ACTION_PRESS && detail.pressAction?.id === ACTION_MARK_DRUNK) {
            // TODO: ghi l·ªãch s·ª≠ u·ªëng n∆∞·ªõc n·∫øu c·∫ßn
        }
    } catch (e) {
        console.log('[Hydration][BG] error', e);
    }
}


